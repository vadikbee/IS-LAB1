# app.py
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D


# --- –§—É–Ω–∫—Ü–∏–∏ –∏–∑ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

def computeCost(X, y, theta):
    m = len(y)
    if y.ndim == 1: y = y.reshape(-1, 1)
    if theta.ndim == 1: theta = theta.reshape(-1, 1)
    predictions = X.dot(theta)
    sqrErrors = (predictions - y) ** 2
    J = (1 / (2 * m)) * np.sum(sqrErrors)
    return J


def gradientDescent(X, y, theta, alpha, num_iters):
    m = len(y)
    J_history = np.zeros(num_iters)
    if y.ndim == 1: y = y.reshape(-1, 1)
    if theta.ndim == 1: theta = theta.reshape(-1, 1)

    for i in range(num_iters):
        predictions = X.dot(theta)
        errors = predictions - y
        delta = (1 / m) * (X.T.dot(errors))
        theta = theta - (alpha * delta)
        J_history[i] = computeCost(X, y, theta)
    return theta, J_history


def featureNormalize(X):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö X –≤ float, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —á–∏—Å–ª–æ–≤–æ–π
    X = X.astype(float)
    mu = np.mean(X, axis=0)
    sigma = np.std(X, axis=0)
    # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å, –µ—Å–ª–∏ –ø—Ä–∏–∑–Ω–∞–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π
    sigma[sigma == 0] = 1
    X_norm = (X - mu) / sigma
    return X_norm, mu, sigma


def normalEqn(X, y):
    theta = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)
    return theta


# --- –ù–û–í–´–ô –î–ò–ó–ê–ô–ù "–ù–û–ß–ù–ê–Ø –°–ê–ö–£–†–ê" ---

st.set_page_config(page_title="–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è –ø–æ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏", layout="wide")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –±–ª–æ–∫ —Å—Ç–∏–ª–µ–π –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
st.markdown("""
<style>
    /* –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω —Å —Ç–µ–º–Ω—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–º */
    .stApp {
        background: linear-gradient(135deg, #1D2B64 0%, #0E1632 100%);
        color: #F0F2F6; /* –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ */
    }

    /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è "—Å—Ç–µ–∫–ª—è–Ω–Ω—ã—Ö" –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤-–∫–∞—Ä—Ç–æ—á–µ–∫ */
    .glass-container {
        background-color: rgba(44, 62, 80, 0.7); /* –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π */
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.18);
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
    h1, h2, h3 {
        color: #FFFFFF; /* –Ø—Ä–∫–æ-–±–µ–ª—ã–π —Ü–≤–µ—Ç */
    }

    /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫ */
    .stTabs [data-baseweb="tab"] {
        background-color: transparent;
        color: #BDC3C7; /* –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤–∫–ª–∞–¥–∫–∏ */
    }
    .stTabs [aria-selected="true"] {
        background-color: #E91E63; /* –Ø—Ä–∫–∏–π —Ä–æ–∑–æ–≤—ã–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ */
        color: white;
        font-weight: bold;
    }

    /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ */
    .stFileUploader label {
        color: #ECF0F1 !important;
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–¥–∞–µ–º —Ç–µ–º–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ Matplotlib
plt.style.use('dark_background')

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

st.markdown("<h1 style='text-align: center;'>üå∏ –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–æ–º –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ (Night Theme) üå∏</h1>",
            unsafe_allow_html=True)
st.markdown("---")

tab1, tab2, tab_lab = st.tabs(
    ["üìà –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è", "üèòÔ∏è –ú–Ω–æ–≥–æ–º–µ—Ä–Ω–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è", "üìñ –ó–∞–¥–∞–Ω–∏—è –∏–∑ –º–µ—Ç–æ–¥–∏—á–∫–∏"])

# --- –í–ö–õ–ê–î–ö–ê 1 ---
with tab1:
    st.header("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞")
    with st.container():
        st.markdown('<div class="glass-container">', unsafe_allow_html=True)
        uploaded_file_1 = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª service_center.csv", type="csv", key="uploader1")
        st.markdown('</div>', unsafe_allow_html=True)

    if uploaded_file_1:
        data1 = pd.read_csv(uploaded_file_1, header=None)
        if len(data1.columns) == 2:
            data1.columns = ['population', 'profit']
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö ---
            for col in data1.columns:
                data1[col] = pd.to_numeric(data1[col], errors='coerce')
            data1.dropna(inplace=True)

        X1_orig, y1 = data1.iloc[:, 0].values, data1.iloc[:, 1].values

        with st.container():
            st.markdown('<div class="glass-container">', unsafe_allow_html=True)
            st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            fig1, ax1 = plt.subplots(figsize=(8, 6))
            fig1.patch.set_alpha(0.0)
            ax1.set_facecolor('none')
            ax1.scatter(X1_orig, y1, c='#E91E63', marker='o', s=50, label='–û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ')
            ax1.set_xlabel('–ù–∞—Å–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (x10,000)', fontsize=12)
            ax1.set_ylabel('–ü—Ä–∏–±—ã–ª—å (x$10,000)', fontsize=12)
            ax1.set_title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –Ω–∞—Å–µ–ª–µ–Ω–∏—è', fontsize=16)
            ax1.legend(fontsize=12)
            st.pyplot(fig1)
            st.markdown('</div>', unsafe_allow_html=True)

    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏")
    alpha1 = st.sidebar.slider("–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (Œ±)", 0.001, 0.03, 0.01, step=0.001, key="alpha1")
    iters1 = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π", 100, 3000, 1500, step=100, key="iters1")

    if uploaded_file_1 and st.sidebar.button("üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏—é"):
        with st.container():
            st.markdown('<div class="glass-container">', unsafe_allow_html=True)
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
            with st.spinner('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫...'):
                m = len(y1)
                X1 = np.stack([np.ones(m), X1_orig], axis=1)
                theta_final, J_history = gradientDescent(X1, y1, np.zeros(2), alpha1, iters1)

            st.success(f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: Œ∏‚ÇÄ = {theta_final[0][0]:.4f}, Œ∏‚ÇÅ = {theta_final[1][0]:.4f}")

            fig_res, (ax_reg, ax_cost) = plt.subplots(1, 2, figsize=(14, 6))
            fig_res.patch.set_alpha(0.0)

            ax_reg.set_facecolor('none')
            ax_cost.set_facecolor('none')

            ax_reg.scatter(X1_orig, y1, c='#E91E63', marker='o', alpha=0.7, label='–î–∞–Ω–Ω—ã–µ')
            ax_reg.plot(X1_orig, X1.dot(theta_final), '-', label='–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è', color='#00FFFF', linewidth=2)
            ax_reg.set_title('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–∏', fontsize=16)
            ax_reg.legend(fontsize=12)
            ax_reg.set_xlabel('–ù–∞—Å–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (x10,000)')
            ax_reg.set_ylabel('–ü—Ä–∏–±—ã–ª—å (x$10,000)')

            ax_cost.plot(range(len(J_history)), J_history, color='#00FFFF')
            ax_cost.set_title('–°—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏', fontsize=16)
            ax_cost.set_xlabel('–ò—Ç–µ—Ä–∞—Ü–∏–∏')
            ax_cost.set_ylabel('–°—Ç–æ–∏–º–æ—Å—Ç—å J(Œ∏)')

            st.pyplot(fig_res)
            st.markdown('</div>', unsafe_allow_html=True)

# --- –í–ö–õ–ê–î–ö–ê 2 ---
with tab2:
    st.header("–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã")

    with st.container():
        st.markdown('<div class="glass-container">', unsafe_allow_html=True)
        uploaded_file_2 = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª cost_apartments.csv", type="csv", key="uploader2")
        st.markdown('</div>', unsafe_allow_html=True)

    if uploaded_file_2:
        with st.container():
            st.markdown('<div class="glass-container">', unsafe_allow_html=True)
            data2 = pd.read_csv(uploaded_file_2, header=None)
            if len(data2.columns) == 3:
                data2.columns = ['squera', 'number_rooms', 'price']
                # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö ---
                for col in data2.columns:
                    data2[col] = pd.to_numeric(data2[col], errors='coerce')
                data2.dropna(inplace=True)

            st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
            area = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å (–º¬≤):", min_value=10, max_value=200, value=60)
            rooms = st.sidebar.number_input("–ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç:", min_value=1, max_value=10, value=3)

            st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Ä–∞—Å—á–µ—Ç–∞")
            col1, col2 = st.columns(2)

            X2_orig, y2 = data2[['squera', 'number_rooms']].values, data2['price'].values

            with col1:
                st.markdown("#### –ú–µ—Ç–æ–¥ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Å–ø—É—Å–∫–∞")
                with st.spinner('–†–∞—Å—á–µ—Ç...'):
                    X_norm, mu, sigma = featureNormalize(X2_orig)
                    X2_gd = np.hstack([np.ones((len(y2), 1)), X_norm])
                    theta_gd, _ = gradientDescent(X2_gd, y2, np.zeros(3), 0.1, 500)
                    price_vec_norm = (np.array([area, rooms]) - mu) / sigma
                    price_vec_final = np.hstack([1, price_vec_norm])
                    prediction_gd = price_vec_final.dot(theta_gd)[0]
                st.metric(label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞", value=f"{prediction_gd:,.0f} —Ä—É–±.".replace(",", " "))

            with col2:
                st.markdown("#### –ú–µ—Ç–æ–¥ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π")
                with st.spinner('–†–∞—Å—á–µ—Ç...'):
                    X2_ne = np.hstack([np.ones((len(y2), 1)), X2_orig])
                    theta_ne = normalEqn(X2_ne, y2)
                    price_vec_ne = np.array([1, area, rooms])
                    prediction_ne = price_vec_ne.dot(theta_ne)
                st.metric(label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞", value=f"{prediction_ne:,.0f} —Ä—É–±.".replace(",", " "))

            st.markdown('</div>', unsafe_allow_html=True)

# --- –ù–û–í–ê–Ø –í–ö–õ–ê–î–ö–ê 3 ---
with tab_lab:
    st.header("–ö–ª—é—á–µ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –º–µ—Ç–æ–¥–∏—á–∫–∏")
    st.markdown(
        """
        –≠—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–µ, 
        —Å–æ–≥–ª–∞—Å–Ω–æ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–º —É–∫–∞–∑–∞–Ω–∏—è–º.
        """
    )

    with st.container():
        st.markdown('<div class="glass-container">', unsafe_allow_html=True)
        st.subheader("1. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ J(Œ∏) (–ó–∞–¥–∞–Ω–∏–µ 2.3)")

        st.info(
            "–ó–¥–µ—Å—å –ø–æ–∫–∞–∑–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Œ∏‚ÇÄ –∏ Œ∏‚ÇÅ –≤ –≤–∏–¥–µ 3D-–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—É—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫ –Ω–∞—Ö–æ–¥–∏—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º.")

        if uploaded_file_1:
            if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ J(Œ∏)", key='j_vis_btn'):
                with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π..."):
                    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
                    uploaded_file_1.seek(0)
                    data_vis = pd.read_csv(uploaded_file_1, header=None)
                    data_vis.columns = ['population', 'profit']
                    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö ---
                    for col in data_vis.columns:
                        data_vis[col] = pd.to_numeric(data_vis[col], errors='coerce')
                    data_vis.dropna(inplace=True)

                    X_vis_orig, y_vis = data_vis.iloc[:, 0].values, data_vis.iloc[:, 1].values
                    X_vis = np.stack([np.ones(len(y_vis)), X_vis_orig], axis=1)

                    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –¥–ª—è theta
                    theta0_vals = np.linspace(-10, 10, 100)
                    theta1_vals = np.linspace(-1, 4, 100)
                    J_vals = np.zeros((len(theta0_vals), len(theta1_vals)))

                    for i, t0 in enumerate(theta0_vals):
                        for j, t1 in enumerate(theta1_vals):
                            t = np.array([t0, t1])
                            J_vals[i, j] = computeCost(X_vis, y_vis, t)

                    J_vals = J_vals.T
                    T0, T1 = np.meshgrid(theta0_vals, theta1_vals)

                    # –†–∞—Å—Å—á–∏—Ç–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Ç–∞
                    theta_opt, _ = gradientDescent(X_vis, y_vis, np.zeros(2), 0.01, 1500)

                    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                    fig_j = plt.figure(figsize=(16, 7))
                    fig_j.patch.set_alpha(0.0)

                    # 3D –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
                    ax_3d = fig_j.add_subplot(1, 2, 1, projection='3d')
                    ax_3d.set_facecolor('none')
                    ax_3d.plot_surface(T0, T1, J_vals, cmap='viridis', alpha=0.8)
                    ax_3d.set_xlabel('Œ∏‚ÇÄ')
                    ax_3d.set_ylabel('Œ∏‚ÇÅ')
                    ax_3d.set_title('–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ J(Œ∏)')

                    # –ö–æ–Ω—Ç—É—Ä–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
                    ax_contour = fig_j.add_subplot(1, 2, 2)
                    ax_contour.set_facecolor('none')
                    ax_contour.contour(T0, T1, J_vals, levels=np.logspace(-2, 3, 20), cmap='viridis')
                    ax_contour.plot(theta_opt[0], theta_opt[1], 'rX', markersize=10, label='–ú–∏–Ω–∏–º—É–º')
                    ax_contour.set_xlabel('Œ∏‚ÇÄ')
                    ax_contour.set_ylabel('Œ∏‚ÇÅ')
                    ax_contour.set_title('–ö–æ–Ω—Ç—É—Ä–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ J(Œ∏)')
                    ax_contour.legend()

                    st.pyplot(fig_j)
        else:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª 'service_center.csv' –Ω–∞ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ.")

        st.markdown('</div>', unsafe_allow_html=True)

    with st.container():
        st.markdown('<div class="glass-container">', unsafe_allow_html=True)
        st.subheader("2. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–µ–π –æ–±—É—á–µ–Ω–∏—è (Œ±) (–ó–∞–¥–∞–Ω–∏–µ 3.3)")
        st.info(
            "–ì—Ä–∞—Ñ–∏–∫ –Ω–∏–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è Œ±. –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–π —à–∞–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.")

        if uploaded_file_2:
            alphas_to_compare = [0.3, 0.1, 0.03, 0.01, 0.003]
            if st.button("–°—Ä–∞–≤–Ω–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è", key='alpha_comp_btn'):
                with st.spinner("–†–∞—Å—á–µ—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö Œ±..."):
                    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
                    uploaded_file_2.seek(0)
                    data_comp = pd.read_csv(uploaded_file_2, header=None)
                    data_comp.columns = ['squera', 'number_rooms', 'price']
                    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö ---
                    for col in data_comp.columns:
                        data_comp[col] = pd.to_numeric(data_comp[col], errors='coerce')
                    data_comp.dropna(inplace=True)

                    X_comp_orig, y_comp = data_comp.iloc[:, :2].values, data_comp.iloc[:, 2].values
                    X_comp_norm, _, _ = featureNormalize(X_comp_orig)
                    X_comp = np.hstack([np.ones((len(y_comp), 1)), X_comp_norm])

                    fig_alpha, ax_alpha = plt.subplots(figsize=(10, 7))
                    fig_alpha.patch.set_alpha(0.0)
                    ax_alpha.set_facecolor('none')

                    for alpha in alphas_to_compare:
                        _, J_hist = gradientDescent(X_comp, y_comp, np.zeros(3), alpha, 50)
                        ax_alpha.plot(J_hist, label=f'Œ± = {alpha}')

                    ax_alpha.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π")
                    ax_alpha.set_ylabel("–°—Ç–æ–∏–º–æ—Å—Ç—å J(Œ∏)")
                    ax_alpha.set_title("–°—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —Å–∫–æ—Ä–æ—Å—Ç—è—Ö –æ–±—É—á–µ–Ω–∏—è")
                    ax_alpha.legend()

                    st.pyplot(fig_alpha)
        else:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª 'cost_apartments.csv' –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–∫–ª–∞–¥–∫–µ.")
        st.markdown('</div>', unsafe_allow_html=True)